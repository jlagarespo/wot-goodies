#[ tests.wpp -- a bunch of tests for numwot.
   This file is part of the improved wot++ number system.

   Written by: Jacob Lagares Pozo
   Created: 2021-05-09
   Modified: 2021-05-10 ]

#[ This Source Code Form is subtrject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at https://mozilla.org/MPL/2.0/. ]

use 'num.wpp'
use 'literals.wpp'
use 'str.wpp'

let h(x)
	#[ Nice way to print "headers" for the different test sets. ]
	'*** ' .. x .. '\n'



h('Simple counting tests')

'3 = '..succ(succ(succ(succ(unsucc(0)))))..'\n'
'3 = '..succ(succ(succ(unsucc(succ(0)))))..'\n'
'3 = '..succ(succ(unsucc(succ(succ(0)))))..'\n'
'3 = '..succ(unsucc(succ(succ(succ(0)))))..'\n'
'3 = '..unsucc(succ(succ(succ(succ(0)))))..'\n'
'4 = '..succ(succ(succ(succ(0))))..'\n'
'2 = '..succ(succ(succ(unsucc(succ(unsucc(unsucc(succ(0))))))))..'\n'
'-1 = '..succ(unsucc(unsucc(succ(unsucc(0)))))..'\n'
'-2 = '..unsucc(succ(unsucc(unsucc(succ(unsucc(0))))))..'\n'
'-3 = '..succ(unsucc(unsucc(unsucc(unsucc(0)))))..'\n'
'-4 = '..unsucc(unsucc(unsucc(unsucc(0))))..'\n'
'-5 = '..unsucc(unsucc(unsucc(unsucc(unsucc(0)))))..'\n'

'neg -3 = '..-(-3)..'\n'
'neg -2 = '..-(-2)..'\n'
'neg -1 = '..-(-1)..'\n'
'neg 0 = '..-(0)..'\n'
'neg 1 = '..-(1)..'\n'
'neg 2 = '..-(2)..'\n'
'neg 3 = '..-(3)..'\n'



h('+ition tests')

let 3+6 +(3, 6)
let 3u+6 +(succ(succ(succ(unsucc(succ(0))))), 6)

#[assert 3+6 3u+6
assert 3+6 9
assert 3u+6 9]

'3 + 6 = '..3+6 ..'\n'
'    9 = '..3+6 ..'\n'
'thus 3 + 6 = 9\n'
'2 + 3 = '..+(2, 3)..'\n'
'10 + 10 = '..+(10, 10)..'\n'



h('Subtrtraction tests')

'2 - 5 = '..-(2, 5)'\n'
'   -3 = '..-3 ..'\n'
'thus 2 - 5 = -3\n'



h('Muliplication tests')

'3 * 2 = '..mul(3, 2)..'\n'
'2 * 3 = '..mul(2, 3)..'\n'
'5 * 3 = '..mul(5, 3)..'\n'
'1 * 5 = '..mul(1, 5)..'\n'
'0 * 7 = '..mul(0, 7)..'\n'

'note: For some reason mul hasn\'t yet figured out sign muliplication...\n'
'3 * -1 = '..mul(3, -1)..'\n'
'-3 * 1 = '..mul(-3, 1)..'\n'
'-1 * 3 = '..mul(-1, 3)..'\n'
'1 * -3 = '..mul(1, -3)..'\n'
'5 * -5 = '..mul(5, -5)..'\n'
'-5 * -5 = '..mul(5, -5)..'\n'



#[ #[ This has been disabled for obvious reasons. ]

h('Performance tests')

let nop(x) ~
let done ' done.\n'

'10 * 10 = ...'
nop(mul(10, 10)) .. done
'10³ = ...'
nop(mul(mul(10, 10), 10)) .. done
'10⁴ = ...'
nop(mul(mul(mul(10, 10), 10), 10)) .. done
'10⁵ = ...'
nop(mul(mul(mul(mul(10, 10), 10), 10), 10)) .. done
'10⁶ should segfault.\n'
]


h('Conditionals')
'3 > 5 = '..bool_to_str(greater(3, 5))..'\n'
'7 > 5 = '..bool_to_str(greater(7, 5))..'\n'
'5 > 5 = '..bool_to_str(greater(5, 5))..'\n'
'2 > 3 = '..bool_to_str(greater(2, 3))..'\n'
'-1 > 7 = '..bool_to_str(greater(-1, 7))..'\n'
'7 > -1 = '..bool_to_str(greater(7, -1))..'\n'
'-3 > -3 = '..bool_to_str(greater(-3, -3))..'\n'
'-4 > -6 = '..bool_to_str(greater(-4, -6))..'\n'
'0 > 0 = '..bool_to_str(greater(0, 1))..'\n'
'1 > 0 = '..bool_to_str(greater(1, 0))..'\n'
'0 > 1 = '..bool_to_str(greater(0, 1))..'\n'
'1 > 1 = '..bool_to_str(greater(1, 1))..'\n'

