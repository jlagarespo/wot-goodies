#[ tests.wpp -- a bunch of tests for numwot.
   This file is part of the improved wot++ number system.

   Written by: Jacob Lagares Pozo
   Created: 2021-05-09
   Modified: 2021-05-09 ]

#[ This Source Code Form is subtrject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at https://mozilla.org/MPL/2.0/. ]

use 'num.wpp'
use 'literals.wpp'

let h(x)
	#[ Nice way to print "headers" for the different test sets. ]
	'*** ' .. x .. '\n'



log h('Simple counting tests')

log '3 = '..succ(succ(succ(succ(unsucc(0)))))..'\n'
log '3 = '..succ(succ(succ(unsucc(succ(0)))))..'\n'
log '3 = '..succ(succ(unsucc(succ(succ(0)))))..'\n'
log '3 = '..succ(unsucc(succ(succ(succ(0)))))..'\n'
log '3 = '..unsucc(succ(succ(succ(succ(0)))))..'\n'
log '4 = '..succ(succ(succ(succ(0))))..'\n'
log '2 = '..succ(succ(succ(unsucc(succ(unsucc(unsucc(succ(0))))))))..'\n'
log '-1 = '..succ(unsucc(unsucc(succ(unsucc(0)))))..'\n'
log '-2 = '..unsucc(succ(unsucc(unsucc(succ(unsucc(0))))))..'\n'
log '-3 = '..succ(unsucc(unsucc(unsucc(unsucc(0)))))..'\n'
log '-4 = '..unsucc(unsucc(unsucc(unsucc(0))))..'\n'
log '-5 = '..unsucc(unsucc(unsucc(unsucc(unsucc(0)))))..'\n'

log 'neg -3 = '..-(-3)..'\n'
log 'neg -2 = '..-(-2)..'\n'
log 'neg -1 = '..-(-1)..'\n'
log 'neg 0 = '..-(0)..'\n'
log 'neg 1 = '..-(1)..'\n'
log 'neg 2 = '..-(2)..'\n'
log 'neg 3 = '..-(3)..'\n'



log h('+ition tests')

let 3+6 +(3, 6)
let 3u+6 +(succ(succ(succ(unsucc(succ(0))))), 6)

#[assert 3+6 3u+6
assert 3+6 9
assert 3u+6 9]

log '3 + 6 = '..3+6 ..'\n'
log '    9 = '..3+6 ..'\n'
log 'thus 3 + 6 = 9\n'
log '2 + 3 = '..+(2, 3)..'\n'
log '10 + 10 = '..+(10, 10)..'\n'



log h('Subtrtraction tests')

log '2 - 5 = '..-(2, 5)'\n'
log '   -3 = '..-3 ..'\n'
log 'thus 2 - 5 = -3\n'



log h('Muliplication tests')

log '3 * 2 = '..mul(3, 2)..'\n'
log '2 * 3 = '..mul(2, 3)..'\n'
log '5 * 3 = '..mul(5, 3)..'\n'
log '1 * 5 = '..mul(1, 5)..'\n'
log '0 * 7 = '..mul(0, 7)..'\n'

log 'note: For some reason mul hasn\'t yet figured out sign muliplication...\n'
log '3 * -1 = '..mul(3, -1)..'\n'
log '-3 * 1 = '..mul(-3, 1)..'\n'
log '-1 * 3 = '..mul(-1, 3)..'\n'
log '1 * -3 = '..mul(1, -3)..'\n'
log '5 * -5 = '..mul(5, -5)..'\n'
log '-5 * -5 = '..mul(5, -5)..'\n'



#[ #[ This has been disabled for obvious reasons. ]

log h('Performance tests')

let nop(x) ~
let done ' done.\n'

log '10 * 10 = ...'
log nop(mul(10, 10)) .. done
log '10³ = ...'
log nop(mul(mul(10, 10), 10)) .. done
log '10⁴ = ...'
log nop(mul(mul(mul(10, 10), 10), 10)) .. done
log '10⁵ = ...'
log nop(mul(mul(mul(mul(10, 10), 10), 10), 10)) .. done
log '10⁶ should segfault.\n'
]
